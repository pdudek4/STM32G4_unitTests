stages:
  - build
  - test
  - deploy
  - release

build_release:
  stage: build
  image: gitlab-lodz.ekoenergetyka.com.pl:5000/eko/dockerimagestm32:build.5
  script:
      - stm32cubeide --launcher.suppressErrors -nosplash -application org.eclipse.cdt.managedbuilder.core.headlessbuild -build STM32G4_unitTests/Release -importAll "$PWD" -data /workspace
  after_script:
      - mv ./Release/STM32G4_unitTests.bin ./TEST_app_${CI_COMMIT_REF_NAME}.bin
      - echo JOB_ID_BUILD_RELEASE=$CI_JOB_ID >> JOB_ID_BUILD_RELEASE.env   #get the job id and save it as environment statement
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      - ./TEST_app_${CI_COMMIT_REF_NAME}.bin
      - ./*FLASH.ld
    expire_in: 1 mos
    # access: 'developer'
    reports:
      dotenv: JOB_ID_BUILD_RELEASE.env   #export the environment statement so we can access it in the next job

build_image:
  stage: build
  image: gitlab-lodz.ekoenergetyka.com.pl:5000/eko/dockerimagestm32:build.5
  needs:
    - job: build_release
      artifacts: true
  script:
    - git clone https://gitlab-ci-token:${CI_BINUTILS_TOKEN}@gitlab.ekoenergetyka.com.pl/przemyslaw.dudek/bin_utils.git
    - cp ./TEST_app_${CI_COMMIT_REF_NAME}.bin ./bin_utils/encrypt_binary/
    - cd bin_utils/encrypt_binary/
    - make
    - ./out-g++/encrypt-binary TEST_app_${CI_COMMIT_REF_NAME}.bin 1 1
  after_script:
    - mv ./bin_utils/encrypt_binary/o.image ./TEST_app_${CI_COMMIT_REF_NAME}.image
    - echo "JOB_ID_BUILD_RELEASE=$JOB_ID_BUILD_RELEASE" >> JOB_ID_BUILD_IMAGE.env   #get the job id and save it as environment statement
    - echo "JOB_ID_BUILD_IMAGE=$CI_JOB_ID" >> JOB_ID_BUILD_IMAGE.env
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}_image"  #must be other than in build_release
    paths:
      - ./TEST_app_${CI_COMMIT_REF_NAME}.image
    expire_in: 1 mos
    # access: 'developer'
    reports:
      dotenv: JOB_ID_BUILD_IMAGE.env   #export the environment statement so we can access it in the release stage


test_ceedling:
  stage: test
  image: throwtheswitch/madsciencelab:0.3.2
  script:
    - cd tests/ceedling && ceedling
  artifacts:
    when: always    #upload the report even if the job fails
    reports:
      junit: ./tests/ceedling/build/artifacts/test/report.xml
    expire_in: 1 mos

test_gtest:
  stage: test
  image: gitlab-lodz.ekoenergetyka.com.pl:5000/eko/dockerimagestm32:build.5
  script:
      - stm32cubeide --launcher.suppressErrors -nosplash -application org.eclipse.cdt.managedbuilder.core.headlessbuild -build STM32G4_unitTests/GTest -importAll "$PWD" -data /workspace
      - ./GTest/STM32G4_unitTests --gtest_output="xml:./GTest/report.xml"
  artifacts:
    when: always    #upload the report even if the job fails
    reports:
      junit: ./GTest/report.xml
    expire_in: 1 mos


deploy_qnap:
  stage: deploy
  image: gitlab-lodz.ekoenergetyka.com.pl:5000/eko/dockerimagestm32:build.5
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
  before_script:
    - mkdir -p /builds/przemyslaw.dudek/mnt/dev     #/builds/repoGroup/mnt/dev
    - mount.cifs -o username="$QNAP_USER",password="$QNAP_PASS" //10.102.12.5/dev /builds/przemyslaw.dudek/mnt/dev/
  script:
    - cp ./TEST_app_${CI_COMMIT_REF_NAME}.bin /builds/przemyslaw.dudek/mnt/dev/Gitlab/
    - cp ./TEST_app_${CI_COMMIT_REF_NAME}.image /builds/przemyslaw.dudek/mnt/dev/Gitlab/


release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build_release
      artifacts: true
    - job: build_image
      artifacts: true
    - job: test_ceedling
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
  script:
    - echo "Running release job"
    # - echo "$JOB_ID_BUILD_RELEASE"
    # - echo $JOB_ID_BUILD_IMAGE
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: 'Firmware: $CI_COMMIT_TAG'
    assets:
      links:
        - name: "Artifacts bin"
          url: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/${JOB_ID_BUILD_RELEASE}/artifacts"
        - name: "Artifacts image"
          url: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/${JOB_ID_BUILD_IMAGE}/artifacts"  
          