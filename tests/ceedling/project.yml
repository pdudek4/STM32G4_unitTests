---

:project:
  :which_ceedling: gem
  :ceedling_version: '?'
  
  :use_mocks: TRUE
  :use_exceptions: FALSE
  
  :use_test_preprocessor: :all
  :use_auxiliary_dependencies: TRUE
  
  :build_root: build
  :test_file_prefix: test

# Configure additional command line flags provided to tools used in each build step
:flags:
  :test:
    :compile:
      :*:
        - -Wno-format
        - -Wno-pointer-to-int-cast
        - -Wno-int-to-pointer-cast
        - -D DEBUG
        - -D UNIT_TEST

:environment: []

# override the default extensions for your system and toolchain
:extension:
  :executable: .out

# This is where Ceedling should look for your source and test files.
# see documentation for the many options for specifying this.
:paths:
  :include:
    - ../../application/**
    - ../../third_party/tiny-AES-c/**
  :test:
    - +:tests/**
#    - -:test/support
  :source:
    - ../../application/**
    - ../../third_party/tiny-AES-c/**
#  :support:
#    - test/support

# Compilation symbols to be injected into builds
# See documentation for advanced options:
#  - Test name matchers for different symbols per test executable build
#  - Referencing symbols in multiple lists using advanced YAML
#  - Specifiying symbols used during test preprocessing
:defines:
  :test:
    - TEST

# Configuration Options specific to CMock. See CMock docs for details
:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :expect_any_args
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :system:
    - m

# Plugins are optional Ceedling features which can be enabled. Ceedling supports
# a variety of plugins which may effect the way things are compiled, reported, 
# or may provide new command options. Refer to the readme in each plugin for 
# details on how to use it.
:plugins:
#  :load_paths:
#    - "#{Ceedling.load_path}"
  :enabled:
     - report_tests_pretty_stdout
     #- report_tests_gtestlike_stdout
     - report_tests_log_factory

# Specify which reports you'd like from the log factory
:report_tests_log_factory:
  :reports:
    #- json 
    - junit 
    #- cppunit 
    #- html 
